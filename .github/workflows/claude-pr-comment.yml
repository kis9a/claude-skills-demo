name: Claude PR Comment

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

jobs:
  claude:
    # PR コメントでのみ実行（Issue コメントは除外）
    if: |
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '@claude')

    runs-on: ubuntu-latest

    steps:
      - name: Check if commenter is collaborator
        id: check_permission
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.actor
              });

              const allowed = ['admin', 'write'].includes(permission.permission);
              core.setOutput('allowed', allowed);

              if (!allowed) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `@${context.actor} には Claude を実行する権限がありません。（要: write または admin 権限）`
                });
              }
              return allowed;
            } catch (error) {
              core.setFailed(`権限チェックに失敗: ${error.message}`);
              return false;
            }

      - name: Checkout repository
        if: steps.check_permission.outputs.allowed == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.issue.number }}/head

      - name: Extract prompt from comment
        if: steps.check_permission.outputs.allowed == 'true'
        id: extract_prompt
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            // @claude の後のテキストを抽出（インジェクション対策として改行は削除）
            const prompt = comment
              .replace(/@claude\s*/i, '')
              .trim()
              .replace(/[\r\n]+/g, ' ')
              .substring(0, 500); // 最大500文字に制限

            core.setOutput('prompt', prompt || 'このPRをレビューしてください');

      - name: Run Claude Code
        if: steps.check_permission.outputs.allowed == 'true'
        id: claude
        uses: anthropics/claude-code-action@fc4013af386ecc44b387ef2931c8d5f7c268b44e
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            PR #${{ github.event.issue.number }} に対するリクエスト: ${{ steps.extract_prompt.outputs.prompt }}

            重要な制約:
            - このリポジトリの pkg/calc パッケージのみを対象としてください
            - テストを実行して、変更が既存の機能を壊していないことを確認してください
            - セキュリティ上の問題がある場合は、必ず指摘してください

          claude_args: |
            --max-turns 20
            --permission-mode bypassPermissions
            --model claude-sonnet-4-5-20250929

      - name: Comment result
        if: always() && steps.check_permission.outputs.allowed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const status = '${{ steps.claude.outcome }}' === 'success' ? '完了しました' : '失敗しました';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Claude Code の実行が${status}。\n\n詳細: ${runUrl}`
            });
